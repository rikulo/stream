//Auto-generated by RSP Compiler
//Source: ../home.rsp.html
part of hello_templating;

/// Template, home, for rendering the view.
Future home(HttpConnect connect) async {
  //ignore: unused_local_variable
  var response = connect.response;
  if (!Rsp.init(connect, "text/html; charset=utf-8"))
    return null;

  response.write("""<!DOCTYPE html>
<html>
  <head>
    <title>Stream: Hello Templating</title>
    <link href="theme.css" rel="stylesheet" type="text/css" />
  </head>
  <body>
""");

  final _0 = StringBuffer(), _1 = connect;
  connect = new HttpConnect.stringBuffer(connect, _0); response = connect.response;

  await connect.include("/header.html");

  connect = _1; response = connect.response;

  response.write("""

""");

  final _2 = new StringBuffer(), _3 = connect;
  connect = new HttpConnect.stringBuffer(connect, _2); response = connect.response;

  await sidebar(new HttpConnect.chain(connect));

  connect = _3; response = connect.response;

  response.write("""

""");

  final _4 = new StringBuffer(), _5 = connect;
  connect = new HttpConnect.stringBuffer(connect, _4); response = connect.response;

  await connect.include("/footer.html");

  connect = _5; response = connect.response;

  response.write("""

""");

  final _6 = new StringBuffer(), _7 = connect;
  connect = new HttpConnect.stringBuffer(connect, _6); response = connect.response;

  response.write("""  <h1>Hello Templating</h1>
  <p>In this example, we demostrate how to define the shared layout (aka., the template), define page fragments and assemble them into a complete page. It is based on the so-called *Composite View* pattern.</p>
""");

  connect = _7; response = connect.response;

  await classic(new HttpConnect.chain(connect), header: _0.toString(), sidebar: _2.toString(), footer: _4.toString(), body: _6.toString());

  response.write("""  </body>
</html>
""");

  return null;
}
