//Auto-generated by RSP Compiler
//Source: test/syntax/syntax.rsp.html
library syntax_rsp;

import 'dart:async';
import 'dart:io';
import 'package:stream/stream.dart';
import 'dart:collection' show LinkedHashMap;

/** Template, syntax, for rendering the view. */
Future syntax(HttpConnect connect, {foo, bool c:false}) { //#4
  var _cs_ = new List<HttpConnect>(), request = connect.request, response = connect.response;

  response.headers.contentType = new ContentType.fromString("""${$nns(foo.contentType)}""");

  response.headers.add("age", """129"""); //header#4

  response.headers.add("accept-ranges", foo.acceptRanges); //header#4

  response.write("""
<!DOCTYPE html>
<html>
  <head>
    <title>"""); //#5

  response.write($nns("$foo.name [${foo.title}]")); //#8


  //#8
  response.write("""
</title>
  </head>
  <body>
    <p>This is a test with """);
  response.write('"""');
  response.write("""
.
    <p>Another expresion: """);

  response.write($nns(foo.description)); //#12


  response.write("""

    <p>An empty expression: """); //#12

  response.write("""

    <p>This is not a tag: [:foo ], [:another and [/none].
    <ul>
"""); //#14

  for (var user in foo.friends) { //for#17

    response.write("""      <li>"""); //#18

    response.write($nns(user.name)); //#18


    response.write("""

"""); //#18

    if (user.isCustomer) { //if#19

      response.write("""
      <i>!important!</i>
"""); //#20
    } //if

    while (user.hasMore()) { //while#22

      response.write("""        """); //#23

      response.write($nns(user.showMore())); //#23


      response.write("""

"""); //#23
    } //while

    response.write("""
      </li>
"""); //#25
  } //for

  response.write("""
    </ul>

"""); //#27

  for (var fruit in ["apple", "orange"]) { //for#29
  } //for

  response.write("""

"""); //#31

  if (foo.isCustomer) { //if#32

    response.write("""
      *Custmer*
"""); //#33

  } else if (c) { //else#34

    return connect.forward("""/x/y/z"""); //#35

  } else if (foo.isEmployee) { //else#36

    response.write("""
      *Employee*
"""); //#37

    return $nnf(syntax(connect, c: true, foo: """abc""")); //forward#38

  } else { //else#39

    response.write("""
      *Unknown* [/if] 
"""); //#40
  } //if

  response.write("""

"""); //#42

  var whatever = new StringBuffer(); _cs_.add(connect); //var#43
  connect = new HttpConnect.buffer(connect, whatever); response = connect.response;

  response.write("""
    define a variable
"""); //#44

  for (var fruit in ["apple", "orange"]) { //for#45

    response.write("""        """); //#46

    response.write($nns(fruit)); //#46


    response.write("""

"""); //#46
  } //for

  connect = _cs_.removeLast(); response = connect.response;
  whatever = whatever.toString();

  response.write("""

"""); //#49

  return connect.include("""/abc""").then((_) { //#50

    var _0 = new StringBuffer(); _cs_.add(connect); //var#52
    connect = new HttpConnect.buffer(connect, _0); response = connect.response;

    response.write("""
      The content for foo
"""); //#53

    connect = _cs_.removeLast(); response = connect.response;

    return $nnf(syntax(new HttpConnect.chain(connect), c: true, foo: _0.toString())).then((_) { //include#51

      response.write("""

"""); //#56

      if (foo.isMeaningful) { //if#57

        response.write("""
      something is meaningful
"""); //#58

        return connect.forward($catUri("""/foo?abc""", {'first': """1st""", 'second': foo})); //#59
      } //if

      response.write("""
  </body>
</html>

"""); //#61

      response.write("""

"""); //#65

      return $nnf();
    }); //end-of-include
  }); //end-of-include
}
